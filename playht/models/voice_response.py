# coding: utf-8

"""
    PlayHT API

    The PlayHT's API API allows developers to Realtime Text to Speech streaming Stream audio bytes from text, Convert long form Text to Speech Generate audio from text, and Voice Cloning Instant Cloning.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devs@play.ht
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VoiceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'sample': 'str',
        'accent': 'str',
        'age': 'str',
        'gender': 'str',
        'language': 'str',
        'language_code': 'str',
        'loudness': 'str',
        'style': 'str',
        'tempo': 'str',
        'texture': 'str',
        'is_cloned': 'bool',
        'voice_engine': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'sample': 'sample',
        'accent': 'accent',
        'age': 'age',
        'gender': 'gender',
        'language': 'language',
        'language_code': 'language_code',
        'loudness': 'loudness',
        'style': 'style',
        'tempo': 'tempo',
        'texture': 'texture',
        'is_cloned': 'is_cloned',
        'voice_engine': 'voice_engine'
    }

    def __init__(self, id=None, name=None, sample=None, accent=None, age=None, gender=None, language=None, language_code=None, loudness=None, style=None, tempo=None, texture=None, is_cloned=None, voice_engine=None):  # noqa: E501
        """VoiceResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._sample = None
        self._accent = None
        self._age = None
        self._gender = None
        self._language = None
        self._language_code = None
        self._loudness = None
        self._style = None
        self._tempo = None
        self._texture = None
        self._is_cloned = None
        self._voice_engine = None
        self.discriminator = None
        self.id = id
        self.name = name
        if sample is not None:
            self.sample = sample
        if accent is not None:
            self.accent = accent
        if age is not None:
            self.age = age
        if gender is not None:
            self.gender = gender
        self.language = language
        self.language_code = language_code
        if loudness is not None:
            self.loudness = loudness
        if style is not None:
            self.style = style
        if tempo is not None:
            self.tempo = tempo
        if texture is not None:
            self.texture = texture
        if is_cloned is not None:
            self.is_cloned = is_cloned
        if voice_engine is not None:
            self.voice_engine = voice_engine

    @property
    def id(self):
        """Gets the id of this VoiceResponse.  # noqa: E501

        Unique ID for a PlayHT or Cloned Voice.  # noqa: E501

        :return: The id of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VoiceResponse.

        Unique ID for a PlayHT or Cloned Voice.  # noqa: E501

        :param id: The id of this VoiceResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this VoiceResponse.  # noqa: E501

        The name of the voice.  # noqa: E501

        :return: The name of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VoiceResponse.

        The name of the voice.  # noqa: E501

        :param name: The name of this VoiceResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def sample(self):
        """Gets the sample of this VoiceResponse.  # noqa: E501

        URI sample of the voice. Can be null.  # noqa: E501

        :return: The sample of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this VoiceResponse.

        URI sample of the voice. Can be null.  # noqa: E501

        :param sample: The sample of this VoiceResponse.  # noqa: E501
        :type: str
        """

        self._sample = sample

    @property
    def accent(self):
        """Gets the accent of this VoiceResponse.  # noqa: E501

        Accent of the voice.  # noqa: E501

        :return: The accent of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._accent

    @accent.setter
    def accent(self, accent):
        """Sets the accent of this VoiceResponse.

        Accent of the voice.  # noqa: E501

        :param accent: The accent of this VoiceResponse.  # noqa: E501
        :type: str
        """

        self._accent = accent

    @property
    def age(self):
        """Gets the age of this VoiceResponse.  # noqa: E501

        Age classification of the voice.  # noqa: E501

        :return: The age of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this VoiceResponse.

        Age classification of the voice.  # noqa: E501

        :param age: The age of this VoiceResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["adult", "old", "youth"]  # noqa: E501
        if age not in allowed_values:
            raise ValueError(
                "Invalid value for `age` ({0}), must be one of {1}"  # noqa: E501
                .format(age, allowed_values)
            )

        self._age = age

    @property
    def gender(self):
        """Gets the gender of this VoiceResponse.  # noqa: E501

        Gender of the voice.  # noqa: E501

        :return: The gender of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this VoiceResponse.

        Gender of the voice.  # noqa: E501

        :param gender: The gender of this VoiceResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["female", "male"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def language(self):
        """Gets the language of this VoiceResponse.  # noqa: E501

        Descriptive language name.  # noqa: E501

        :return: The language of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this VoiceResponse.

        Descriptive language name.  # noqa: E501

        :param language: The language of this VoiceResponse.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def language_code(self):
        """Gets the language_code of this VoiceResponse.  # noqa: E501

        Code of the language.  # noqa: E501

        :return: The language_code of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this VoiceResponse.

        Code of the language.  # noqa: E501

        :param language_code: The language_code of this VoiceResponse.  # noqa: E501
        :type: str
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")  # noqa: E501

        self._language_code = language_code

    @property
    def loudness(self):
        """Gets the loudness of this VoiceResponse.  # noqa: E501

        Loudness of the voice.  # noqa: E501

        :return: The loudness of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._loudness

    @loudness.setter
    def loudness(self, loudness):
        """Sets the loudness of this VoiceResponse.

        Loudness of the voice.  # noqa: E501

        :param loudness: The loudness of this VoiceResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["low", "neutral", "whisper", "high"]  # noqa: E501
        if loudness not in allowed_values:
            raise ValueError(
                "Invalid value for `loudness` ({0}), must be one of {1}"  # noqa: E501
                .format(loudness, allowed_values)
            )

        self._loudness = loudness

    @property
    def style(self):
        """Gets the style of this VoiceResponse.  # noqa: E501

        Style of voice narration.  # noqa: E501

        :return: The style of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this VoiceResponse.

        Style of voice narration.  # noqa: E501

        :param style: The style of this VoiceResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["narrative", "videos", "training", "advertising", "meditation", "gaming"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"  # noqa: E501
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def tempo(self):
        """Gets the tempo of this VoiceResponse.  # noqa: E501

        Speaking tempo of the voice.  # noqa: E501

        :return: The tempo of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo):
        """Sets the tempo of this VoiceResponse.

        Speaking tempo of the voice.  # noqa: E501

        :param tempo: The tempo of this VoiceResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["neutral", "slow", "fast"]  # noqa: E501
        if tempo not in allowed_values:
            raise ValueError(
                "Invalid value for `tempo` ({0}), must be one of {1}"  # noqa: E501
                .format(tempo, allowed_values)
            )

        self._tempo = tempo

    @property
    def texture(self):
        """Gets the texture of this VoiceResponse.  # noqa: E501

        Texture of the voice.  # noqa: E501

        :return: The texture of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._texture

    @texture.setter
    def texture(self, texture):
        """Sets the texture of this VoiceResponse.

        Texture of the voice.  # noqa: E501

        :param texture: The texture of this VoiceResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["gravelly", "smooth", "round", "thick"]  # noqa: E501
        if texture not in allowed_values:
            raise ValueError(
                "Invalid value for `texture` ({0}), must be one of {1}"  # noqa: E501
                .format(texture, allowed_values)
            )

        self._texture = texture

    @property
    def is_cloned(self):
        """Gets the is_cloned of this VoiceResponse.  # noqa: E501

        If the voice is a cloned voice.  # noqa: E501

        :return: The is_cloned of this VoiceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_cloned

    @is_cloned.setter
    def is_cloned(self, is_cloned):
        """Sets the is_cloned of this VoiceResponse.

        If the voice is a cloned voice.  # noqa: E501

        :param is_cloned: The is_cloned of this VoiceResponse.  # noqa: E501
        :type: bool
        """

        self._is_cloned = is_cloned

    @property
    def voice_engine(self):
        """Gets the voice_engine of this VoiceResponse.  # noqa: E501

        The voice engine used to synthesize the voice.  # noqa: E501

        :return: The voice_engine of this VoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._voice_engine

    @voice_engine.setter
    def voice_engine(self, voice_engine):
        """Sets the voice_engine of this VoiceResponse.

        The voice engine used to synthesize the voice.  # noqa: E501

        :param voice_engine: The voice_engine of this VoiceResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["PlayHT1.0", "PlayHT2.0"]  # noqa: E501
        if voice_engine not in allowed_values:
            raise ValueError(
                "Invalid value for `voice_engine` ({0}), must be one of {1}"  # noqa: E501
                .format(voice_engine, allowed_values)
            )

        self._voice_engine = voice_engine

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VoiceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoiceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
