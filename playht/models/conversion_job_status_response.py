# coding: utf-8

"""
    PlayHT API

    The PlayHT's API API allows developers to Realtime Text to Speech streaming Stream audio bytes from text, Convert long form Text to Speech Generate audio from text, and Voice Cloning Instant Cloning.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devs@play.ht
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConversionJobStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'voice': 'str',
        'converted': 'bool',
        'audio_duration': 'float',
        'audio_url': 'str',
        'message': 'str'
    }

    attribute_map = {
        'voice': 'voice',
        'converted': 'converted',
        'audio_duration': 'audioDuration',
        'audio_url': 'audioUrl',
        'message': 'message'
    }

    def __init__(self, voice=None, converted=None, audio_duration=None, audio_url=None, message=None):  # noqa: E501
        """ConversionJobStatusResponse - a model defined in Swagger"""  # noqa: E501
        self._voice = None
        self._converted = None
        self._audio_duration = None
        self._audio_url = None
        self._message = None
        self.discriminator = None
        if voice is not None:
            self.voice = voice
        if converted is not None:
            self.converted = converted
        if audio_duration is not None:
            self.audio_duration = audio_duration
        if audio_url is not None:
            self.audio_url = audio_url
        if message is not None:
            self.message = message

    @property
    def voice(self):
        """Gets the voice of this ConversionJobStatusResponse.  # noqa: E501

        The voice used for transcription.  # noqa: E501

        :return: The voice of this ConversionJobStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this ConversionJobStatusResponse.

        The voice used for transcription.  # noqa: E501

        :param voice: The voice of this ConversionJobStatusResponse.  # noqa: E501
        :type: str
        """

        self._voice = voice

    @property
    def converted(self):
        """Gets the converted of this ConversionJobStatusResponse.  # noqa: E501

        Whether the audio has been transcribed yet.  # noqa: E501

        :return: The converted of this ConversionJobStatusResponse.  # noqa: E501
        :rtype: bool
        """
        return self._converted

    @converted.setter
    def converted(self, converted):
        """Sets the converted of this ConversionJobStatusResponse.

        Whether the audio has been transcribed yet.  # noqa: E501

        :param converted: The converted of this ConversionJobStatusResponse.  # noqa: E501
        :type: bool
        """

        self._converted = converted

    @property
    def audio_duration(self):
        """Gets the audio_duration of this ConversionJobStatusResponse.  # noqa: E501

        The duration of the audio file in seconds.  # noqa: E501

        :return: The audio_duration of this ConversionJobStatusResponse.  # noqa: E501
        :rtype: float
        """
        return self._audio_duration

    @audio_duration.setter
    def audio_duration(self, audio_duration):
        """Sets the audio_duration of this ConversionJobStatusResponse.

        The duration of the audio file in seconds.  # noqa: E501

        :param audio_duration: The audio_duration of this ConversionJobStatusResponse.  # noqa: E501
        :type: float
        """

        self._audio_duration = audio_duration

    @property
    def audio_url(self):
        """Gets the audio_url of this ConversionJobStatusResponse.  # noqa: E501

        The URL of the generated audio file.  # noqa: E501

        :return: The audio_url of this ConversionJobStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._audio_url

    @audio_url.setter
    def audio_url(self, audio_url):
        """Sets the audio_url of this ConversionJobStatusResponse.

        The URL of the generated audio file.  # noqa: E501

        :param audio_url: The audio_url of this ConversionJobStatusResponse.  # noqa: E501
        :type: str
        """

        self._audio_url = audio_url

    @property
    def message(self):
        """Gets the message of this ConversionJobStatusResponse.  # noqa: E501

        A message about the status of the transcription job.  # noqa: E501

        :return: The message of this ConversionJobStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ConversionJobStatusResponse.

        A message about the status of the transcription job.  # noqa: E501

        :param message: The message of this ConversionJobStatusResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversionJobStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversionJobStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
