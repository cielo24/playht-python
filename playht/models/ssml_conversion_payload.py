# coding: utf-8

"""
    PlayHT API

    The PlayHT's API API allows developers to Realtime Text to Speech streaming Stream audio bytes from text, Convert long form Text to Speech Generate audio from text, and Voice Cloning Instant Cloning.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devs@play.ht
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SSMLConversionPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ssml': 'list[str]',
        'voice': 'str',
        'title': 'str',
        'narration_style': 'str',
        'global_speed': 'str',
        'pronunciations': 'list[SSMLConversionPayloadPronunciations]',
        'trim_silence': 'bool',
        'transcription_id': 'str'
    }

    attribute_map = {
        'ssml': 'ssml',
        'voice': 'voice',
        'title': 'title',
        'narration_style': 'narrationStyle',
        'global_speed': 'globalSpeed',
        'pronunciations': 'pronunciations',
        'trim_silence': 'trimSilence',
        'transcription_id': 'transcriptionId'
    }

    def __init__(self, ssml=None, voice=None, title=None, narration_style=None, global_speed=None, pronunciations=None, trim_silence=None, transcription_id=None):  # noqa: E501
        """SSMLConversionPayload - a model defined in Swagger"""  # noqa: E501
        self._ssml = None
        self._voice = None
        self._title = None
        self._narration_style = None
        self._global_speed = None
        self._pronunciations = None
        self._trim_silence = None
        self._transcription_id = None
        self.discriminator = None
        self.ssml = ssml
        self.voice = voice
        if title is not None:
            self.title = title
        if narration_style is not None:
            self.narration_style = narration_style
        if global_speed is not None:
            self.global_speed = global_speed
        if pronunciations is not None:
            self.pronunciations = pronunciations
        if trim_silence is not None:
            self.trim_silence = trim_silence
        if transcription_id is not None:
            self.transcription_id = transcription_id

    @property
    def ssml(self):
        """Gets the ssml of this SSMLConversionPayload.  # noqa: E501

        Array of strings, where each string represents a paragraph in SSML format.  # noqa: E501

        :return: The ssml of this SSMLConversionPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._ssml

    @ssml.setter
    def ssml(self, ssml):
        """Sets the ssml of this SSMLConversionPayload.

        Array of strings, where each string represents a paragraph in SSML format.  # noqa: E501

        :param ssml: The ssml of this SSMLConversionPayload.  # noqa: E501
        :type: list[str]
        """
        if ssml is None:
            raise ValueError("Invalid value for `ssml`, must not be `None`")  # noqa: E501

        self._ssml = ssml

    @property
    def voice(self):
        """Gets the voice of this SSMLConversionPayload.  # noqa: E501

        Voice used to synthesize the text.  # noqa: E501

        :return: The voice of this SSMLConversionPayload.  # noqa: E501
        :rtype: str
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this SSMLConversionPayload.

        Voice used to synthesize the text.  # noqa: E501

        :param voice: The voice of this SSMLConversionPayload.  # noqa: E501
        :type: str
        """
        if voice is None:
            raise ValueError("Invalid value for `voice`, must not be `None`")  # noqa: E501

        self._voice = voice

    @property
    def title(self):
        """Gets the title of this SSMLConversionPayload.  # noqa: E501

        A name to your file. You can use this name to find the audio in your Play.ht dashboard.  # noqa: E501

        :return: The title of this SSMLConversionPayload.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SSMLConversionPayload.

        A name to your file. You can use this name to find the audio in your Play.ht dashboard.  # noqa: E501

        :param title: The title of this SSMLConversionPayload.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def narration_style(self):
        """Gets the narration_style of this SSMLConversionPayload.  # noqa: E501

        String representing the tone and accent of the voice to read the text. Make sure the value for narrationStyle is supported by the voice in your request.  # noqa: E501

        :return: The narration_style of this SSMLConversionPayload.  # noqa: E501
        :rtype: str
        """
        return self._narration_style

    @narration_style.setter
    def narration_style(self, narration_style):
        """Sets the narration_style of this SSMLConversionPayload.

        String representing the tone and accent of the voice to read the text. Make sure the value for narrationStyle is supported by the voice in your request.  # noqa: E501

        :param narration_style: The narration_style of this SSMLConversionPayload.  # noqa: E501
        :type: str
        """

        self._narration_style = narration_style

    @property
    def global_speed(self):
        """Gets the global_speed of this SSMLConversionPayload.  # noqa: E501

        String in the format <number>%, where <number> is in the closed interval of [20, 200]. Use this to speed-up, or slow-down the speaking rate of the speech.  # noqa: E501

        :return: The global_speed of this SSMLConversionPayload.  # noqa: E501
        :rtype: str
        """
        return self._global_speed

    @global_speed.setter
    def global_speed(self, global_speed):
        """Sets the global_speed of this SSMLConversionPayload.

        String in the format <number>%, where <number> is in the closed interval of [20, 200]. Use this to speed-up, or slow-down the speaking rate of the speech.  # noqa: E501

        :param global_speed: The global_speed of this SSMLConversionPayload.  # noqa: E501
        :type: str
        """

        self._global_speed = global_speed

    @property
    def pronunciations(self):
        """Gets the pronunciations of this SSMLConversionPayload.  # noqa: E501

        Array of objects to handle specific word pronunciations.  # noqa: E501

        :return: The pronunciations of this SSMLConversionPayload.  # noqa: E501
        :rtype: list[SSMLConversionPayloadPronunciations]
        """
        return self._pronunciations

    @pronunciations.setter
    def pronunciations(self, pronunciations):
        """Sets the pronunciations of this SSMLConversionPayload.

        Array of objects to handle specific word pronunciations.  # noqa: E501

        :param pronunciations: The pronunciations of this SSMLConversionPayload.  # noqa: E501
        :type: list[SSMLConversionPayloadPronunciations]
        """

        self._pronunciations = pronunciations

    @property
    def trim_silence(self):
        """Gets the trim_silence of this SSMLConversionPayload.  # noqa: E501

        When enabled, the audio will be trimmed to remove any silence from the end of the file.  # noqa: E501

        :return: The trim_silence of this SSMLConversionPayload.  # noqa: E501
        :rtype: bool
        """
        return self._trim_silence

    @trim_silence.setter
    def trim_silence(self, trim_silence):
        """Sets the trim_silence of this SSMLConversionPayload.

        When enabled, the audio will be trimmed to remove any silence from the end of the file.  # noqa: E501

        :param trim_silence: The trim_silence of this SSMLConversionPayload.  # noqa: E501
        :type: bool
        """

        self._trim_silence = trim_silence

    @property
    def transcription_id(self):
        """Gets the transcription_id of this SSMLConversionPayload.  # noqa: E501

        Pass this to update an existing audio file.  # noqa: E501

        :return: The transcription_id of this SSMLConversionPayload.  # noqa: E501
        :rtype: str
        """
        return self._transcription_id

    @transcription_id.setter
    def transcription_id(self, transcription_id):
        """Sets the transcription_id of this SSMLConversionPayload.

        Pass this to update an existing audio file.  # noqa: E501

        :param transcription_id: The transcription_id of this SSMLConversionPayload.  # noqa: E501
        :type: str
        """

        self._transcription_id = transcription_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SSMLConversionPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSMLConversionPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
