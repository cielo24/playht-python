# coding: utf-8

"""
    PlayHT API

    The PlayHT's API API allows developers to Realtime Text to Speech streaming Stream audio bytes from text, Convert long form Text to Speech Generate audio from text, and Voice Cloning Instant Cloning.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devs@play.ht
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from playht.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cloned_voices(self, **kwargs):  # noqa: E501
        """Obtains a list of all cloned voices created by the user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloned_voices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ClonedVoiceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cloned_voices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cloned_voices_with_http_info(**kwargs)  # noqa: E501
            return data

    def cloned_voices_with_http_info(self, **kwargs):  # noqa: E501
        """Obtains a list of all cloned voices created by the user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloned_voices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ClonedVoiceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloned_voices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'UserAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/cloned-voices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClonedVoiceResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def convert_ssml_to_speech(self, **kwargs):  # noqa: E501
        """Convert SSML to Speech. It can generate text for Standard & Premium (S&P) voices. The identifiers for these voices look like 'en-US-JennyNeural'. If you are using PlayHT voices (their identifiers look like 'larry' or a URL).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.convert_ssml_to_speech(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SSMLConversionPayload body:
        :return: SSMLConversionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.convert_ssml_to_speech_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.convert_ssml_to_speech_with_http_info(**kwargs)  # noqa: E501
            return data

    def convert_ssml_to_speech_with_http_info(self, **kwargs):  # noqa: E501
        """Convert SSML to Speech. It can generate text for Standard & Premium (S&P) voices. The identifiers for these voices look like 'en-US-JennyNeural'. If you are using PlayHT voices (their identifiers look like 'larry' or a URL).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.convert_ssml_to_speech_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SSMLConversionPayload body:
        :return: SSMLConversionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method convert_ssml_to_speech" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'UserAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/convert', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SSMLConversionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_instant_voice_clone_url(self, sample_file_url, voice_name, **kwargs):  # noqa: E501
        """Create Instant Voice Clone (via file URL). Create an instant voice clone by providing an URL for a sample audio file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_instant_voice_clone_url(sample_file_url, voice_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sample_file_url: The URL of the audio file selected as the source for the voice clone. The file should have a duration ranging from 2 seconds to 1 hour. It can be in any audio format, as long as it falls within the size range of 5kb to 50 MB (required)
        :param str voice_name: The name for this new cloned voice. (required)
        :return: SSMLConversionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_instant_voice_clone_url_with_http_info(sample_file_url, voice_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_instant_voice_clone_url_with_http_info(sample_file_url, voice_name, **kwargs)  # noqa: E501
            return data

    def create_instant_voice_clone_url_with_http_info(self, sample_file_url, voice_name, **kwargs):  # noqa: E501
        """Create Instant Voice Clone (via file URL). Create an instant voice clone by providing an URL for a sample audio file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_instant_voice_clone_url_with_http_info(sample_file_url, voice_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sample_file_url: The URL of the audio file selected as the source for the voice clone. The file should have a duration ranging from 2 seconds to 1 hour. It can be in any audio format, as long as it falls within the size range of 5kb to 50 MB (required)
        :param str voice_name: The name for this new cloned voice. (required)
        :return: SSMLConversionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_file_url', 'voice_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_instant_voice_clone_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_file_url' is set
        if ('sample_file_url' not in params or
                params['sample_file_url'] is None):
            raise ValueError("Missing the required parameter `sample_file_url` when calling `create_instant_voice_clone_url`")  # noqa: E501
        # verify the required parameter 'voice_name' is set
        if ('voice_name' not in params or
                params['voice_name'] is None):
            raise ValueError("Missing the required parameter `voice_name` when calling `create_instant_voice_clone_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sample_file_url' in params:
            query_params.append(('sample_file_url', params['sample_file_url']))  # noqa: E501
        if 'voice_name' in params:
            query_params.append(('voice_name', params['voice_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'UserAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/cloned-voices/instant/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SSMLConversionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cloned_voices(self, voice_id, **kwargs):  # noqa: E501
        """Delete Cloned Voices. Deletes a cloned voice created by the user using the provided voice_id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cloned_voices(voice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str voice_id: The ID of the cloned voice to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cloned_voices_with_http_info(voice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cloned_voices_with_http_info(voice_id, **kwargs)  # noqa: E501
            return data

    def delete_cloned_voices_with_http_info(self, voice_id, **kwargs):  # noqa: E501
        """Delete Cloned Voices. Deletes a cloned voice created by the user using the provided voice_id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cloned_voices_with_http_info(voice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str voice_id: The ID of the cloned voice to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['voice_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cloned_voices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'voice_id' is set
        if ('voice_id' not in params or
                params['voice_id'] is None):
            raise ValueError("Missing the required parameter `voice_id` when calling `delete_cloned_voices`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'voice_id' in params:
            query_params.append(('voice_id', params['voice_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'UserAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/cloned-voices', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversion_job_status(self, transcription_id, **kwargs):  # noqa: E501
        """Get conversion job status. Gets text-to-speech job status and generated audio file URL.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversion_job_status(transcription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transcription_id: Transcription ID (required)
        :return: ConversionJobStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversion_job_status_with_http_info(transcription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_conversion_job_status_with_http_info(transcription_id, **kwargs)  # noqa: E501
            return data

    def get_conversion_job_status_with_http_info(self, transcription_id, **kwargs):  # noqa: E501
        """Get conversion job status. Gets text-to-speech job status and generated audio file URL.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversion_job_status_with_http_info(transcription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transcription_id: Transcription ID (required)
        :return: ConversionJobStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transcription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversion_job_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transcription_id' is set
        if ('transcription_id' not in params or
                params['transcription_id'] is None):
            raise ValueError("Missing the required parameter `transcription_id` when calling `get_conversion_job_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'transcription_id' in params:
            query_params.append(('transcriptionId', params['transcription_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'UserAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/articleStatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversionJobStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sp_voices(self, **kwargs):  # noqa: E501
        """Gets the full list of Standard & Premium (S&P) voices.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sp_voices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SPVoiceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sp_voices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sp_voices_with_http_info(**kwargs)  # noqa: E501
            return data

    def sp_voices_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the full list of Standard & Premium (S&P) voices.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sp_voices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SPVoiceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sp_voices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'UserAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/getVoices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SPVoiceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def voices(self, **kwargs):  # noqa: E501
        """Gets the full list of stock PlayHT Voices available for use with the API.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VoiceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.voices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.voices_with_http_info(**kwargs)  # noqa: E501
            return data

    def voices_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the full list of stock PlayHT Voices available for use with the API.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.voices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VoiceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method voices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'UserAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/voices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VoiceResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
